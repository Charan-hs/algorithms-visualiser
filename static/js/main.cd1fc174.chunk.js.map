{"version":3,"sources":["backTrackingAlgorithms/nQueensProblem/crown.png","utils/navbar.jsx","utils/indexTable.jsx","utils/randomIntFromInterval.js","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/cellColors.js","sortingAlgorithms/sortingVisualiser.jsx","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","backTrackingAlgorithms/ratInAMaze/arrayofMazes.js","backTrackingAlgorithms/ratInAMaze/ratInAMaze.jsx","App.js","index.js"],"names":["module","exports","NavBar","className","href","IndexTable","props","state","class","scope","React","Component","randomIntFromInterval","min","max","Math","floor","random","ComplexityTable","id","colSpan","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","i","j","push","doMerge","quickSortHelper","left","right","pivot","swap","buildMaxHeap","heapify","index","leftChild","righChild","heap","arr","temp","cellColors","color","reverse","SortingVisualiser","disabled","this","resetArray","SIZE_OF_BOARD","val","setState","drawBoard","arrayBoard","document","getElementById","innerHTML","container","style","setProperty","cell","createElement","appendChild","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","parseInt","value","alert","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","setTimeout","arrayBlocks","getElementsByClassName","count","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","transition","classList","add","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","onClick","defaultValue","selectAlgorithm","Header","title","ArrayTile","idx","type","BinarySearch","found","elementFoundAt","target","msgAfterExecution","previousLength","prevArray","remove","sortedArray","sort","a","b","start","end","arrayTiles","binarySearchAnimations","element","mid","resetAllTiles","console","log","hightlightWithinBounds","placeholder","binarySearch","map","key","LinearSearch","msg","ele","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","createBoard","size","board","getRowsOfZeroes","solveNQueenUtil","col","N","isSafe","row","isRatSafe","maze","x","y","mazeRows","mazeCols","solveRatInAMaze","sol","endOfMazeX","endOfMazeY","ANIMATION_SPEED_SECONDS","NQueensProblem","SIZE","padding","fontSize","item","crownsI","l","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","isQueenSafe","prepend","trueValues","src","width","alt","readOnly","MAZES","MAZE","SOL","prepareSolutionBoardOfZeroes","RatInAMazeProblem","solveMaze","solution","blocks","rat","finalPath","blockStyle","ROWS","COLS","testAlgo","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.cd1fc174.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","import React from \"react\";\r\n\r\nconst NavBar = () => (\r\n    <div className=\"bg-dark py-2 px-2\">\r\n        <small className=\"text-light ml-2\">Algorithms Visualiser</small>\r\n        <span className=\"float-right\">\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://github.com/dipeshpatil/algorithms-visualiser\"\r\n            >\r\n                <i className=\"fab text-light fa-github\"></i>\r\n                &nbsp; Repo URL\r\n            </a>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://linkedin.com/in/dipesh-patil\"\r\n            >\r\n                <i className=\"fab text-light fa-linkedin\"></i>\r\n                &nbsp; Dipesh Patil\r\n            </a>\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nimport \"./bootstrap.min.css\";\r\n\r\nexport default class IndexTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"container mt-2\">\r\n                <div className=\"text-center text-dark\">So Far Implemented</div>\r\n                <table className=\"table table-striped table-dark mt-2\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Latest Visualiser</th>\r\n                            <th scope=\"col\">Category</th>\r\n                            <th scope=\"col\">URL</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Rat In A Maze</td>\r\n                            <td>Backtracking</td>\r\n                            <td>\r\n                                <code>/rat-in-a-maze</code>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Sorting Visualiser</td>\r\n                            <td>Sorting</td>\r\n                            <td>\r\n                                <code>/sorting</code>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>N Queens Problem</td>\r\n                            <td>Backtracking</td>\r\n                            <td>\r\n                                <code>/n-queens-problem</code>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Binary Search</td>\r\n                            <td>Searching</td>\r\n                            <td>\r\n                                <code>/binary-search</code>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Linear Search</td>\r\n                            <td>Searching</td>\r\n                            <td>\r\n                                <code>/linear-search</code>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"text-center text-muted\">\r\n                    Happy Visualisation Day!\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTable\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th colSpan=\"2\">Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Case: </td>\r\n                    <td className=\"text-success table-success\">Best</td>\r\n                    <td className=\"text-danger table-danger\">Worst</td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Heap Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Merge Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Quick Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>Log N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bubble Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Insertion Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Selection Sort</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n    buildMaxHeap(array, animations);\r\n    let lastElement = array.length - 1;\r\n    while (lastElement > 0) {\r\n        swap(0, lastElement, array);\r\n        animations.push([0, lastElement, array[0], array[lastElement]]);\r\n        heapify(array, 0, lastElement, animations);\r\n        lastElement -= 1;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n    let i;\r\n    i = array.length / 2 - 1;\r\n    i = Math.floor(i);\r\n    while (i >= 0) {\r\n        heapify(array, i, array.length, animations);\r\n        i -= 1;\r\n    }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n    let index, leftChild, righChild;\r\n\r\n    while (i < max) {\r\n        index = i;\r\n        leftChild = 2 * i + 1;\r\n        righChild = leftChild + 1;\r\n\r\n        if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n        if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n        if (index === i) return;\r\n\r\n        swap(i, index, heap);\r\n        animations.push([i, index, heap[i], heap[index]]);\r\n        i = index;\r\n    }\r\n}\r\n\r\nfunction swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","const cellColors = [\r\n    [\r\n        \"#040C12\",\r\n        \"#081925\",\r\n        \"#0C2637\",\r\n        \"#10334A\",\r\n        \"#14405C\",\r\n        \"#184C6F\",\r\n        \"#1C5981\",\r\n        \"#206694\",\r\n        \"#2473A6\",\r\n        \"#2980B9\",\r\n        \"#3E8CC0\",\r\n        \"#5399C7\",\r\n        \"#69A6CE\",\r\n        \"#7EB2D5\",\r\n        \"#94BFDC\",\r\n        \"#A9CCE3\",\r\n        \"#BED8EA\",\r\n        \"#D4E5F1\",\r\n        \"#E9F2F8\",\r\n    ],\r\n    [\r\n        \"#180308\",\r\n        \"#300610\",\r\n        \"#480918\",\r\n        \"#600C21\",\r\n        \"#780F29\",\r\n        \"#901231\",\r\n        \"#A8153A\",\r\n        \"#C01842\",\r\n        \"#D81B4A\",\r\n        \"#F01F53\",\r\n        \"#F13564\",\r\n        \"#F34B75\",\r\n        \"#F46286\",\r\n        \"#F67897\",\r\n        \"#F78FA9\",\r\n        \"#F9A5BA\",\r\n        \"#FABBCB\",\r\n        \"#FCD2DC\",\r\n        \"#FDE8ED\",\r\n    ],\r\n    [\r\n        \"#180C03\",\r\n        \"#301906\",\r\n        \"#482609\",\r\n        \"#60330C\",\r\n        \"#78400F\",\r\n        \"#904D12\",\r\n        \"#A85A15\",\r\n        \"#C06718\",\r\n        \"#D8741B\",\r\n        \"#F0811F\",\r\n        \"#F18D35\",\r\n        \"#F39A4B\",\r\n        \"#F4A662\",\r\n        \"#F6B378\",\r\n        \"#F7C08F\",\r\n        \"#F9CCA5\",\r\n        \"#FAD9BB\",\r\n        \"#FCE5D2\",\r\n        \"#FDF2E8\",\r\n    ],\r\n    [\r\n        \"#0D0118\",\r\n        \"#1A0231\",\r\n        \"#27034A\",\r\n        \"#340463\",\r\n        \"#41067C\",\r\n        \"#4E0795\",\r\n        \"#5B08AE\",\r\n        \"#6809C7\",\r\n        \"#750AE0\",\r\n        \"#820CF9\",\r\n        \"#8E24F9\",\r\n        \"#9B3CFA\",\r\n        \"#A754FA\",\r\n        \"#B46DFB\",\r\n        \"#C085FC\",\r\n        \"#CD9DFC\",\r\n        \"#D9B6FD\",\r\n        \"#E6CEFD\",\r\n        \"#F2E6FE\",\r\n    ],\r\n];\r\n\r\nexport default cellColors;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\nimport {\r\n    getMergeSortAnimations,\r\n    getBubbleSortAnimations,\r\n    getInsertionSortAnimations,\r\n    getSelectionSortAnimations,\r\n    getQuickSortAnimations,\r\n    getHeapSortAnimations,\r\n} from \"./sortingAlgorithms\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./sortingVisualiser.css\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-7\">\r\n                        <div\r\n                            className=\"box shadowT board\"\r\n                            id=\"sortingBoard\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-sm-5 mt-1\">\r\n                        <div className=\"input-group mt-1\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <button\r\n                                    onClick={() => this.resetArray()}\r\n                                    className=\"btn btn-danger\"\r\n                                    disabled={disabled}\r\n                                >\r\n                                    New Array\r\n                                </button>\r\n                            </div>\r\n                            <select\r\n                                className=\"custom-select\"\r\n                                id=\"sortingAlgoDropDown\"\r\n                                disabled={disabled}\r\n                                defaultValue=\"0\"\r\n                            >\r\n                                <option disabled value=\"0\">\r\n                                    Algorithm\r\n                                </option>\r\n                                <option value=\"1\">Bubble Sort</option>\r\n                                <option value=\"2\">Selection Sort</option>\r\n                                <option value=\"3\">Insertion Sort</option>\r\n                                <option value=\"4\">Quick Sort</option>\r\n                                <option value=\"5\">Heap Sort</option>\r\n                                <option value=\"6\">Merge Sort</option>\r\n                            </select>\r\n                            <div className=\"input-group-append\">\r\n                                <button\r\n                                    onClick={() => this.selectAlgorithm()}\r\n                                    className=\"btn btn-success\"\r\n                                    disabled={disabled}\r\n                                >\r\n                                    Visualize\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <ComplexityTable />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <div>\r\n        <h2 className=\"mt-3 text-center\" >{title}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ArrayTile = ({ idx, val, type }) =>\r\n    type === \"binarySearch\" ? (\r\n        <div className=\"b-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    ) : (\r\n        <div className=\"l-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    );\r\n\r\nexport default ArrayTile;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n//Stylesheets\r\nimport \"./binarySearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 3;\r\n\r\nexport default class BinarySearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: null,\r\n            previousLength: 0,\r\n            animations: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = [];\r\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\r\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        let sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({\r\n            array: sortedArray,\r\n            found: false,\r\n            disabled: false,\r\n            msgAfterExecution: null,\r\n            previousLength: this.state.animations.length,\r\n        });\r\n    }\r\n\r\n    hightlightWithinBounds(start, end, arrayTiles) {\r\n        for (let i = start; i <= end; i++) {\r\n            setTimeout(() => {\r\n                arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\r\n            }, i * 100);\r\n        }\r\n    }\r\n\r\n    resetAllTiles(arrayTiles) {\r\n        for (let i = 0; i < arrayTiles.length; i++) {\r\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\r\n        }\r\n    }\r\n\r\n    binarySearch() {\r\n        const { array } = this.state;\r\n        const animations = [];\r\n        let count = 0;\r\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\r\n        const target = document.getElementById(\"binarySearchTargetVal\").value;\r\n        if (target === \"\") return;\r\n\r\n        binarySearchAnimations(\r\n            array,\r\n            0,\r\n            array.length - 1,\r\n            parseInt(target),\r\n            animations\r\n        );\r\n\r\n        for (let k = 0; k < animations.length; k++) {\r\n            const [left, right, mid, found] = animations[k];\r\n            count++;\r\n\r\n            if (k === animations.length - 1 && found) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: true, found: true });\r\n                    this.resetAllTiles(arrayTiles);\r\n                    arrayTiles[mid].classList.add(\"highlight\");\r\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            if (left === 0 && right === 0 && mid === 0 && !found) {\r\n                setTimeout(() => {\r\n                    console.log(\"ELement not found\");\r\n                    this.setState({\r\n                        msgAfterExecution: `Element not found`,\r\n                        found: false,\r\n                    });\r\n                    this.resetAllTiles(arrayTiles);\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ disabled: true });\r\n                this.resetAllTiles(arrayTiles);\r\n                this.hightlightWithinBounds(left, right, arrayTiles);\r\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({ disabled: false });\r\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                <center>\r\n                    <Header title=\"Binary Search\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"input-group col-sm-10\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"binarySearchTargetVal\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Find Element\"\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.binarySearch()}\r\n                                        className=\"btn btn-success\"\r\n                                        type=\"button\"\r\n                                        id=\"binarySearchBtn\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Search\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        id=\"binarySearchResetArray\"\r\n                                        type=\"button\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset Array\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                    </div>\r\n                    {!found ? (\r\n                        <p className=\"not-found\">{msgAfterExecution}</p>\r\n                    ) : null}\r\n                    <br />\r\n                    <div className=\"container\">\r\n                        {array.map((value, idx) => (\r\n                            <ArrayTile\r\n                                type={\"binarySearch\"}\r\n                                key={idx}\r\n                                idx={idx}\r\n                                val={value}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function linearSearchAnimations(array, target) {\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const ele = array[i];\r\n        const tar = parseInt(target);\r\n        if (ele === tar) {\r\n            animations.push([i, ele, true]);\r\n            break;\r\n        } else {\r\n            animations.push([i, ele, false]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function binarySearchAnimations(\r\n    array,\r\n    left,\r\n    right,\r\n    element,\r\n    animations = []\r\n) {\r\n    if (right >= left) {\r\n        let mid = parseInt(left + (right - left) / 2);\r\n        if (array[mid] === element) {\r\n            animations.push([left, right, mid, true]);\r\n            return true;\r\n        } else if (array[mid] > element) {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, left, mid - 1, element, animations);\r\n        } else {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, mid + 1, right, element, animations);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n// Stylesheets\r\nimport \"./linearSearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 1;\r\n\r\nexport default class LinearSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const prevArray = document.getElementsByClassName(\"l-array-bar\");\r\n        const found = false;\r\n        const disabled = false;\r\n        document.getElementById(\"targetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({ array, found, disabled, msgAfterExecution: \"\" });\r\n    }\r\n\r\n    linearSearch() {\r\n        var msg = \"\";\r\n        const target = document.getElementById(\"targetVal\").value;\r\n        if (target === \"\") return;\r\n        const animations = linearSearchAnimations(this.state.array, target);\r\n        console.log(animations);\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [idx, currentEle, found] = animations[i];\r\n            const arrayBars = document.getElementsByClassName(\"l-array-bar\");\r\n            const arrayBar = arrayBars[idx];\r\n            const arrayBarStyle = arrayBar.style;\r\n\r\n            count++;\r\n\r\n            if (found) {\r\n                msg = `${currentEle} found at index ${idx}`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: true,\r\n                        disabled: true,\r\n                        elementFoundAt: idx,\r\n                        target: currentEle,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                    arrayBar.classList.add(\"highlight\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n                break;\r\n            } else {\r\n                msg = `${target} not found`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: false,\r\n                        disabled: true,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                disabled: false,\r\n                msgAfterExecution: msg,\r\n            });\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                <center>\r\n                    <Header title=\"Linear Search\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"input-group col-sm-10\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"targetVal\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Find Element\"\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.linearSearch()}\r\n                                        className=\"btn btn-success\"\r\n                                        type=\"button\"\r\n                                        id=\"button-addon2\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Search\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        id=\"resetArray\"\r\n                                        type=\"button\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset Array\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    {!found ? (\r\n                        <p className=\"found growFind\">{msgAfterExecution}</p>\r\n                    ) : null}\r\n                    <div className=\"container\">\r\n                        {array.map((value, idx) => (\r\n                            <ArrayTile\r\n                                type={`linearSearch`}\r\n                                key={idx}\r\n                                idx={idx}\r\n                                val={value}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*\r\n-----------------------\r\nBACKTRACKING ALGORITHMS\r\n-----------------------\r\n*/\r\n\r\n/* -----------------------\r\nN Queen Problem Algorithms\r\n-------------------------- */\r\n\r\nfunction createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n\r\n/* ----------------------\r\nRat In A Maze Solving Algorithms\r\n------------------------- */\r\n\r\nfunction isRatSafe(maze = [], x, y) {\r\n    let mazeRows = maze.length;\r\n    let mazeCols = maze[0].length;\r\n\r\n    return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\r\n}\r\n\r\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\r\n    let endOfMazeX = maze.length - 1;\r\n    let endOfMazeY = maze[0].length - 1;\r\n\r\n    // Goal State || Base Case\r\n    if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\r\n        sol[x][y] = 1;\r\n        animations.push([x, y, true]);\r\n        return true;\r\n    }\r\n\r\n    // Check if maze is valid\r\n    if (isRatSafe(maze, x, y)) {\r\n        animations.push([x, y, true]);\r\n        sol[x][y] = 1;\r\n\r\n        // Move Down\r\n        if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true;\r\n        // Move Right\r\n        if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true;\r\n        // No Move is Possible -> Backtrack\r\n        else {\r\n            animations.push([x, y, false]);\r\n            sol[x][y] = 0;\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function solveMaze(maze = [], sol = []) {\r\n    const animations = [];\r\n    if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\r\n        console.log(\"Solution doesn't\");\r\n        return [sol, []];\r\n    }\r\n    return [sol, animations];\r\n}\r\n\r\nexport function prepareSolutionBoardOfZeroes(size) {\r\n    let sol = [];\r\n    for (let i = 0; i < size; i++) {\r\n        var temp = [];\r\n        for (let j = 0; j < size; j++) {\r\n            temp.push(0);\r\n        }\r\n        sol.push(temp);\r\n    }\r\n    return sol;\r\n}\r\n","import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\n// Stylesheets\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fa-crown\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2>\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 8 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const MAZES = [\r\n    [\r\n        [1, 1, 0, 0, 1, 1, 1, 0],\r\n        [1, 0, 1, 1, 0, 1, 1, 1],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 0, 0],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 1, 0],\r\n        [1, 1, 0, 0, 0, 0, 1, 1],\r\n        [1, 0, 1, 1, 0, 0, 1, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 0, 0],\r\n        [0, 1, 1, 1, 0, 1, 0, 0],\r\n        [0, 0, 0, 1, 1, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 1],\r\n        [1, 0, 1, 1, 1, 0, 0, 1],\r\n        [1, 0, 0, 0, 0, 0, 0, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 0, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 0],\r\n        [1, 0, 0, 0, 1, 1, 1, 1],\r\n        [1, 1, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 1, 1, 1, 1, 1],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n    ],\r\n];\r\n\r\nexport default MAZES;\r\n","import React from \"react\";\r\n\r\nimport {\r\n    solveMaze,\r\n    prepareSolutionBoardOfZeroes,\r\n} from \"./../backTrackingAlgorithms\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval\";\r\n// Stylesheets\r\nimport \"./ratInAMaze.css\";\r\n\r\nimport MAZES from \"./arrayofMazes\";\r\n\r\nconst MAZE = MAZES[randomIntFromInterval(0, MAZES.length - 1)];\r\n// const MAZE = MAZES[2];\r\nconst SOL = prepareSolutionBoardOfZeroes(MAZE.length);\r\n\r\nconst NO_PATH_COLOR = \"#ededed\";\r\nconst PATH_COLOR = \"#ADD2FE\";\r\nconst SAFE_COLOR = \"#B0FCEF\";\r\n\r\nconst ANIMATION_SPEED_MS = 1000;\r\n\r\nexport default class RatInAMazeProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(MAZE);\r\n    }\r\n\r\n    testAlgo() {\r\n        const sol = solveMaze(MAZE, SOL, []);\r\n\r\n        const animations = sol[1];\r\n        const solution = sol[0];\r\n\r\n        const blocks = document.getElementsByClassName(\"r-array-tile\");\r\n        const rat = document.getElementsByClassName(\"rat\");\r\n        let count = 0;\r\n\r\n        const finalPath = [];\r\n        for (let i = 0; i < solution.length; i++) {\r\n            for (let j = 0; j < solution.length; j++) {\r\n                let idx = MAZE.length * i + j;\r\n                if (solution[i][j] === 1) {\r\n                    finalPath.push(idx);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [x, y, isRatSafe] = animations[i]; // current\r\n            const idx = x * MAZE.length + y;\r\n            const blockStyle = blocks[idx].style;\r\n\r\n            setTimeout(() => {\r\n                if (isRatSafe) {\r\n                    blockStyle.backgroundColor = SAFE_COLOR;\r\n                    rat[idx].innerHTML = \"🐀\";\r\n                    rat[idx].classList.add(\"flipH\");\r\n                } else {\r\n                    blockStyle.backgroundColor = PATH_COLOR;\r\n                    rat[idx].innerHTML = \"\";\r\n                    rat[idx].classList.remove(\"flipH\");\r\n                }\r\n            }, i * ANIMATION_SPEED_MS);\r\n            count = i;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < finalPath.length; i++) {\r\n                setTimeout(() => {\r\n                    blocks[finalPath[i]].classList.add(\"highlightPath\");\r\n                }, i * 40);\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    drawBoard(MAZE = []) {\r\n        const ROWS = MAZE.length;\r\n        const COLS = MAZE[0].length;\r\n\r\n        const maze = document.getElementById(\"ratMazeBoard\");\r\n        maze.innerHTML = \"\";\r\n\r\n        maze.style.setProperty(\"--Rgrid-rows\", ROWS);\r\n        maze.style.setProperty(\"--Rgrid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            for (let j = 0; j < COLS; j++) {\r\n                let cell = document.createElement(\"div\");\r\n                let item = document.createElement(\"i\");\r\n                let cellStyle = cell.style;\r\n                cell.appendChild(item).className = \"fas rat\";\r\n\r\n                if (i === 0 && j === 0) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🐀\";\r\n                }\r\n\r\n                if (i === ROWS - 1 && j === COLS - 1) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🚪\";\r\n                }\r\n\r\n                if (MAZE[i][j] === 1) {\r\n                    cellStyle.backgroundColor = PATH_COLOR;\r\n                } else {\r\n                    cellStyle.backgroundColor = NO_PATH_COLOR;\r\n                }\r\n\r\n                maze.appendChild(cell).className = \"Rgrid-item r-array-tile\";\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center mt-2\">Rat In A Maze</h2>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"Rbox Rboard mt-2\"\r\n                                id=\"ratMazeBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-2\">\r\n                            <button\r\n                                onClick={() => this.testAlgo()}\r\n                                className=\"btn btn-sm btn-primary\"\r\n                            >\r\n                                Visualize Algorithm\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport NavBar from \"./utils/navbar\";\nimport { Route } from \"react-router-dom\";\n\n//IndexTable\nimport IndexTable from \"./utils/indexTable\";\n\n// Sorting Visualiser\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\n\n// Searching Visualiser\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\n\n// Backtracking Visualiser\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\nimport RatInAMazeProblem from \"./backTrackingAlgorithms/ratInAMaze/ratInAMaze\";\n\n// Stylesheets\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar />\n                <Route exact path=\"/\" component={IndexTable} />\n                <Route path=\"/sorting\" component={SortingVisualiser} />\n                <Route path=\"/linear-search\" component={LinearSearch} />\n                <Route path=\"/binary-search\" component={BinarySearch} />\n                <Route path=\"/n-queens-problem\" component={NQueensProblem} />\n                <Route path=\"/rat-in-a-maze\" component={RatInAMazeProblem} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}