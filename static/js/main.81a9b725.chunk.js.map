{"version":3,"sources":["backTrackingAlgorithms/nQueensProblem/crown.png","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","utils/randomIntFromInterval.js","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/cellColors.js","sortingAlgorithms/sortingVisualiser.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","createBoard","size","board","i","push","getRowsOfZeroes","solveNQueenUtil","col","animations","N","length","isSafe","row","j","ANIMATION_SPEED_SECONDS","NQueensProblem","props","state","disabled","this","drawBoard","SIZE","padding","fontSize","document","getElementById","innerHTML","container","style","setProperty","cell","createElement","item","appendChild","className","arrayTiles","getElementsByClassName","crownsI","l","backgroundColor","color","parseInt","value","alert","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","count","setState","isQueenSafe","idx","classList","add","setTimeout","remove","prepend","transition","trueValues","src","width","alt","id","type","placeholder","defaultValue","readOnly","onClick","href","React","Component","randomIntFromInterval","min","max","Math","floor","random","Header","title","ArrayTile","val","BinarySearch","array","found","elementFoundAt","target","msgAfterExecution","previousLength","resetArray","prevArray","sortedArray","slice","sort","a","b","start","end","binarySearchAnimations","left","right","element","mid","k","resetAllTiles","console","log","hightlightWithinBounds","binarySearch","map","key","LinearSearch","msg","ele","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","ComplexityTable","colSpan","getMergeSortAnimations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","doMerge","quickSortHelper","pivot","swap","buildMaxHeap","heapify","index","leftChild","righChild","heap","arr","temp","cellColors","reverse","SortingVisualiser","SIZE_OF_BOARD","arrayBoard","cellStyle","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","arrayBlocks","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","selectAlgorithm","App","tabId","x","display","openTab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81a9b725.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","function createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n","import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\n// Stylesheets\r\nimport \"./../../utils/bootstrap.min.css\";\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fas\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2>\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 8 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <div>\r\n        <h2 className=\"mt-3 text-center\" >{title}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ArrayTile = ({ idx, val, type }) =>\r\n    type === \"binarySearch\" ? (\r\n        <div className=\"b-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    ) : (\r\n        <div className=\"l-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    );\r\n\r\nexport default ArrayTile;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n//Stylesheets\r\nimport \"./../../utils/bootstrap.min.css\";\r\nimport \"./binarySearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 3;\r\n\r\nexport default class BinarySearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: null,\r\n            previousLength: 0,\r\n            animations: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = [];\r\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\r\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        let sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({\r\n            array: sortedArray,\r\n            found: false,\r\n            disabled: false,\r\n            msgAfterExecution: null,\r\n            previousLength: this.state.animations.length,\r\n        });\r\n    }\r\n\r\n    hightlightWithinBounds(start, end, arrayTiles) {\r\n        for (let i = start; i <= end; i++) {\r\n            setTimeout(() => {\r\n                arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\r\n            }, i * 100);\r\n        }\r\n    }\r\n\r\n    resetAllTiles(arrayTiles) {\r\n        for (let i = 0; i < arrayTiles.length; i++) {\r\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\r\n        }\r\n    }\r\n\r\n    binarySearch() {\r\n        const { array } = this.state;\r\n        const animations = [];\r\n        let count = 0;\r\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\r\n        const target = document.getElementById(\"binarySearchTargetVal\").value;\r\n        if (target === \"\") return;\r\n\r\n        binarySearchAnimations(\r\n            array,\r\n            0,\r\n            array.length - 1,\r\n            parseInt(target),\r\n            animations\r\n        );\r\n\r\n        for (let k = 0; k < animations.length; k++) {\r\n            const [left, right, mid, found] = animations[k];\r\n            count++;\r\n\r\n            if (k === animations.length - 1 && found) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: true, found: true });\r\n                    this.resetAllTiles(arrayTiles);\r\n                    arrayTiles[mid].classList.add(\"highlight\");\r\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            if (left === 0 && right === 0 && mid === 0 && !found) {\r\n                setTimeout(() => {\r\n                    console.log(\"ELement not found\");\r\n                    this.setState({\r\n                        msgAfterExecution: `Element not found`,\r\n                        found: false,\r\n                    });\r\n                    this.resetAllTiles(arrayTiles);\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ disabled: true });\r\n                this.resetAllTiles(arrayTiles);\r\n                this.hightlightWithinBounds(left, right, arrayTiles);\r\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({ disabled: false });\r\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                <center>\r\n                    <Header title=\"Binary Search\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"input-group col-sm-10\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"binarySearchTargetVal\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Find Element\"\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.binarySearch()}\r\n                                        className=\"btn btn-success\"\r\n                                        type=\"button\"\r\n                                        id=\"binarySearchBtn\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Search\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        id=\"binarySearchResetArray\"\r\n                                        type=\"button\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset Array\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                    </div>\r\n                    {!found ? (\r\n                        <p className=\"not-found\">{msgAfterExecution}</p>\r\n                    ) : null}\r\n                    <br />\r\n                    <div className=\"container\">\r\n                        {array.map((value, idx) => (\r\n                            <ArrayTile\r\n                                type={\"binarySearch\"}\r\n                                key={idx}\r\n                                idx={idx}\r\n                                val={value}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function linearSearchAnimations(array, target) {\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const ele = array[i];\r\n        const tar = parseInt(target);\r\n        if (ele === tar) {\r\n            animations.push([i, ele, true]);\r\n            break;\r\n        } else {\r\n            animations.push([i, ele, false]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function binarySearchAnimations(\r\n    array,\r\n    left,\r\n    right,\r\n    element,\r\n    animations = []\r\n) {\r\n    if (right >= left) {\r\n        let mid = parseInt(left + (right - left) / 2);\r\n        if (array[mid] === element) {\r\n            animations.push([left, right, mid, true]);\r\n            return true;\r\n        } else if (array[mid] > element) {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, left, mid - 1, element, animations);\r\n        } else {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, mid + 1, right, element, animations);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n// Stylesheets\r\nimport \"./../../utils/bootstrap.min.css\";\r\nimport \"./linearSearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 0.2;\r\n\r\nexport default class LinearSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const prevArray = document.getElementsByClassName(\"l-array-bar\");\r\n        const found = false;\r\n        const disabled = false;\r\n        document.getElementById(\"targetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({ array, found, disabled, msgAfterExecution: \"\" });\r\n    }\r\n\r\n    linearSearch() {\r\n        var msg = \"\";\r\n        const target = document.getElementById(\"targetVal\").value;\r\n        if (target === \"\") return;\r\n        const animations = linearSearchAnimations(this.state.array, target);\r\n        console.log(animations);\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [idx, currentEle, found] = animations[i];\r\n            const arrayBars = document.getElementsByClassName(\"l-array-bar\");\r\n            const arrayBar = arrayBars[idx];\r\n            const arrayBarStyle = arrayBar.style;\r\n\r\n            count++;\r\n\r\n            if (found) {\r\n                msg = `${currentEle} found at index ${idx}`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: true,\r\n                        disabled: true,\r\n                        elementFoundAt: idx,\r\n                        target: currentEle,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                    arrayBar.classList.add(\"highlight\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n                break;\r\n            } else {\r\n                msg = `${target} not found`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: false,\r\n                        disabled: true,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                disabled: false,\r\n                msgAfterExecution: msg,\r\n            });\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                <center>\r\n                    <Header title=\"Linear Search\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"input-group col-sm-10\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"targetVal\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Find Element\"\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.linearSearch()}\r\n                                        className=\"btn btn-success\"\r\n                                        type=\"button\"\r\n                                        id=\"button-addon2\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Search\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        id=\"resetArray\"\r\n                                        type=\"button\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset Array\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    {!found ? (\r\n                        <p className=\"found growFind\">{msgAfterExecution}</p>\r\n                    ) : null}\r\n                    <div className=\"container\">\r\n                        {array.map((value, idx) => (\r\n                            <ArrayTile\r\n                                type={`linearSearch`}\r\n                                key={idx}\r\n                                idx={idx}\r\n                                val={value}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTable\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th colSpan=\"2\">Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Case: </td>\r\n                    <td className=\"text-success table-success\">Best</td>\r\n                    <td className=\"text-danger table-danger\">Worst</td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Heap Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Merge Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Quick Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bubble Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Insertion Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Selection Sort</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n    buildMaxHeap(array, animations);\r\n    let lastElement = array.length - 1;\r\n    while (lastElement > 0) {\r\n        swap(0, lastElement, array);\r\n        animations.push([0, lastElement, array[0], array[lastElement]]);\r\n        heapify(array, 0, lastElement, animations);\r\n        lastElement -= 1;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n    let i;\r\n    i = array.length / 2 - 1;\r\n    i = Math.floor(i);\r\n    while (i >= 0) {\r\n        heapify(array, i, array.length, animations);\r\n        i -= 1;\r\n    }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n    let index, leftChild, righChild;\r\n\r\n    while (i < max) {\r\n        index = i;\r\n        leftChild = 2 * i + 1;\r\n        righChild = leftChild + 1;\r\n\r\n        if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n        if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n        if (index === i) return;\r\n\r\n        swap(i, index, heap);\r\n        animations.push([i, index, heap[i], heap[index]]);\r\n        i = index;\r\n    }\r\n}\r\n\r\nfunction swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","const cellColors = [\r\n    [\r\n        \"#040C12\",\r\n        \"#081925\",\r\n        \"#0C2637\",\r\n        \"#10334A\",\r\n        \"#14405C\",\r\n        \"#184C6F\",\r\n        \"#1C5981\",\r\n        \"#206694\",\r\n        \"#2473A6\",\r\n        \"#2980B9\",\r\n        \"#3E8CC0\",\r\n        \"#5399C7\",\r\n        \"#69A6CE\",\r\n        \"#7EB2D5\",\r\n        \"#94BFDC\",\r\n        \"#A9CCE3\",\r\n        \"#BED8EA\",\r\n        \"#D4E5F1\",\r\n        \"#E9F2F8\",\r\n    ],\r\n    [\r\n        \"#180308\",\r\n        \"#300610\",\r\n        \"#480918\",\r\n        \"#600C21\",\r\n        \"#780F29\",\r\n        \"#901231\",\r\n        \"#A8153A\",\r\n        \"#C01842\",\r\n        \"#D81B4A\",\r\n        \"#F01F53\",\r\n        \"#F13564\",\r\n        \"#F34B75\",\r\n        \"#F46286\",\r\n        \"#F67897\",\r\n        \"#F78FA9\",\r\n        \"#F9A5BA\",\r\n        \"#FABBCB\",\r\n        \"#FCD2DC\",\r\n        \"#FDE8ED\",\r\n    ],\r\n    [\r\n        \"#180C03\",\r\n        \"#301906\",\r\n        \"#482609\",\r\n        \"#60330C\",\r\n        \"#78400F\",\r\n        \"#904D12\",\r\n        \"#A85A15\",\r\n        \"#C06718\",\r\n        \"#D8741B\",\r\n        \"#F0811F\",\r\n        \"#F18D35\",\r\n        \"#F39A4B\",\r\n        \"#F4A662\",\r\n        \"#F6B378\",\r\n        \"#F7C08F\",\r\n        \"#F9CCA5\",\r\n        \"#FAD9BB\",\r\n        \"#FCE5D2\",\r\n        \"#FDF2E8\",\r\n    ],\r\n    [\r\n        \"#0D0118\",\r\n        \"#1A0231\",\r\n        \"#27034A\",\r\n        \"#340463\",\r\n        \"#41067C\",\r\n        \"#4E0795\",\r\n        \"#5B08AE\",\r\n        \"#6809C7\",\r\n        \"#750AE0\",\r\n        \"#820CF9\",\r\n        \"#8E24F9\",\r\n        \"#9B3CFA\",\r\n        \"#A754FA\",\r\n        \"#B46DFB\",\r\n        \"#C085FC\",\r\n        \"#CD9DFC\",\r\n        \"#D9B6FD\",\r\n        \"#E6CEFD\",\r\n        \"#F2E6FE\",\r\n    ],\r\n];\r\n\r\nexport default cellColors;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\nimport {\r\n    getMergeSortAnimations,\r\n    getBubbleSortAnimations,\r\n    getInsertionSortAnimations,\r\n    getSelectionSortAnimations,\r\n    getQuickSortAnimations,\r\n    getHeapSortAnimations,\r\n} from \"./sortingAlgorithms\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./../utils/bootstrap.min.css\";\r\nimport \"./sortingVisualiser.css\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-7\">\r\n                        <div\r\n                            className=\"box shadowT board\"\r\n                            id=\"sortingBoard\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-sm-5 mt-1\">\r\n                        <div className=\"input-group mt-1\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <button\r\n                                    onClick={() => this.resetArray()}\r\n                                    className=\"btn btn-danger\"\r\n                                    disabled={disabled}\r\n                                >\r\n                                    New Array\r\n                                </button>\r\n                            </div>\r\n                            <select\r\n                                className=\"custom-select\"\r\n                                id=\"sortingAlgoDropDown\"\r\n                                disabled={disabled}\r\n                                defaultValue=\"0\"\r\n                            >\r\n                                <option disabled value=\"0\">\r\n                                    Algorithm\r\n                                </option>\r\n                                <option value=\"1\">Bubble Sort</option>\r\n                                <option value=\"2\">Selection Sort</option>\r\n                                <option value=\"3\">Insertion Sort</option>\r\n                                <option value=\"4\">Quick Sort</option>\r\n                                <option value=\"5\">Heap Sort</option>\r\n                                <option value=\"6\">Merge Sort</option>\r\n                            </select>\r\n                            <div className=\"input-group-append\">\r\n                                <button\r\n                                    onClick={() => this.selectAlgorithm()}\r\n                                    className=\"btn btn-success\"\r\n                                    disabled={disabled}\r\n                                >\r\n                                    Visualize\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <ComplexityTable />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    openTab(tabId) {\n        let x = document.getElementsByClassName(\"tabs\");\n        for (let i = 0; i < x.length; i++) {\n            x[i].style.display = \"none\";\n        }\n        document.getElementById(tabId).style.display = \"block\";\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"bg-dark py-2 px-2\">\n                    <span className=\"text-light\">Algorithms Visualiser</span>\n                    <span className=\"float-right\">\n                        <a\n                            className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\n                            href=\"https://github.com/dipeshpatil/algorithms-visualiser\"\n                        >\n                            <i className=\"fab text-light fa-github\"></i>\n                            &nbsp; Repo URL\n                        </a>\n                        <a\n                            className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\n                            href=\"https://linkedin.com/in/dipesh-patil\"\n                        >\n                            <i className=\"fab text-light fa-linkedin\"></i>\n                            &nbsp; Dipesh Patil\n                        </a>\n                    </span>\n                </div>\n                <ul className=\"nav sticky-top bg-secondary\">\n                    <li className=\"nav-item\">\n                        <a\n                            onClick={() => this.openTab(\"sortingTab\")}\n                            className=\"nav-link text-light\"\n                            href=\"#\"\n                        >\n                            Sorting\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a\n                            onClick={() => this.openTab(\"backtrackingTab\")}\n                            className=\"nav-link text-light\"\n                            href=\"#\"\n                        >\n                            Backtracking\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a\n                            onClick={() => this.openTab(\"searchingTab\")}\n                            className=\"nav-link text-light\"\n                            href=\"#\"\n                        >\n                            Searching\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"mt-90\">\n                    <div id=\"sortingTab\" className=\"tabs\">\n                        <SortingVisualiser />\n                    </div>\n                    <div\n                        id=\"searchingTab\"\n                        className=\"tabs\"\n                        style={{ display: \"none\" }}\n                    >\n                        <LinearSearch />\n                        <BinarySearch />\n                    </div>\n                    <div\n                        id=\"backtrackingTab\"\n                        className=\"tabs\"\n                        style={{ display: \"none\" }}\n                    >\n                        <NQueensProblem />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}