{"version":3,"sources":["backTrackingAlgorithms/nQueensProblem/crown.png","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","utils/randomIntFromInterval.js","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","createBoard","size","board","i","push","getRowsOfZeroes","solveNQueenUtil","col","animations","N","length","isSafe","row","j","ANIMATION_SPEED_SECONDS","NQueensProblem","props","state","disabled","this","drawBoard","SIZE","padding","fontSize","document","getElementById","innerHTML","container","style","setProperty","cell","createElement","item","appendChild","className","arrayTiles","getElementsByClassName","crownsI","l","backgroundColor","color","parseInt","value","alert","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","count","setState","isQueenSafe","idx","classList","add","setTimeout","remove","prepend","transition","trueValues","src","width","alt","id","type","placeholder","defaultValue","readOnly","onClick","href","React","Component","randomIntFromInterval","min","max","Math","floor","random","Header","title","ArrayTile","val","BinarySearch","array","found","elementFoundAt","target","msgAfterExecution","previousLength","resetArray","prevArray","sortedArray","slice","sort","a","b","start","end","binarySearchAnimations","left","right","element","mid","k","resetAllTiles","console","log","hightlightWithinBounds","binarySearch","map","key","LinearSearch","msg","ele","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","App","tabId","x","display","openTab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bac0775b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","function createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n","import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\n// Stylesheets\r\nimport \"./../../utils/bootstrap.min.css\";\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fas\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2>\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 16 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <div>\r\n        <h2 className=\"mt-3 text-center\" >{title}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ArrayTile = ({ idx, val, type }) =>\r\n    type === \"binarySearch\" ? (\r\n        <div className=\"b-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    ) : (\r\n        <div className=\"l-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    );\r\n\r\nexport default ArrayTile;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n//Stylesheets\r\nimport \"./../../utils/bootstrap.min.css\";\r\nimport \"./binarySearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 3;\r\n\r\nexport default class BinarySearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: null,\r\n            previousLength: 0,\r\n            animations: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = [];\r\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\r\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        let sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({\r\n            array: sortedArray,\r\n            found: false,\r\n            disabled: false,\r\n            msgAfterExecution: null,\r\n            previousLength: this.state.animations.length,\r\n        });\r\n    }\r\n\r\n    hightlightWithinBounds(start, end, arrayTiles) {\r\n        for (let i = start; i <= end; i++) {\r\n            setTimeout(() => {\r\n                arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\r\n            }, i * 100);\r\n        }\r\n    }\r\n\r\n    resetAllTiles(arrayTiles) {\r\n        for (let i = 0; i < arrayTiles.length; i++) {\r\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\r\n        }\r\n    }\r\n\r\n    binarySearch() {\r\n        const { array } = this.state;\r\n        const animations = [];\r\n        let count = 0;\r\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\r\n\r\n        binarySearchAnimations(\r\n            array,\r\n            0,\r\n            array.length - 1,\r\n            parseInt(document.getElementById(\"binarySearchTargetVal\").value),\r\n            animations\r\n        );\r\n\r\n        for (let k = 0; k < animations.length; k++) {\r\n            const [left, right, mid, found] = animations[k];\r\n            count++;\r\n\r\n            if (k === animations.length - 1 && found) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: true, found: true });\r\n                    this.resetAllTiles(arrayTiles);\r\n                    arrayTiles[mid].classList.add(\"highlight\");\r\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            if (left === 0 && right === 0 && mid === 0 && !found) {\r\n                setTimeout(() => {\r\n                    console.log(\"ELement not found\");\r\n                    this.setState({\r\n                        msgAfterExecution: `Element not found`,\r\n                        found: false,\r\n                    });\r\n                    this.resetAllTiles(arrayTiles);\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ disabled: true });\r\n                this.resetAllTiles(arrayTiles);\r\n                this.hightlightWithinBounds(left, right, arrayTiles);\r\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({ disabled: false });\r\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                <center>\r\n                    <Header title=\"Binary Search\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"input-group col-sm-10\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"binarySearchTargetVal\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Find Element\"\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.binarySearch()}\r\n                                        className=\"btn btn-success\"\r\n                                        type=\"button\"\r\n                                        id=\"binarySearchBtn\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Search\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        id=\"binarySearchResetArray\"\r\n                                        type=\"button\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset Array\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                    </div>\r\n                    {!found ? (\r\n                        <p className=\"not-found\">{msgAfterExecution}</p>\r\n                    ) : null}\r\n                    <br />\r\n                    <div className=\"container\">\r\n                        {array.map((value, idx) => (\r\n                            <ArrayTile\r\n                                type={\"binarySearch\"}\r\n                                key={idx}\r\n                                idx={idx}\r\n                                val={value}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function linearSearchAnimations(array, target) {\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const ele = array[i];\r\n        const tar = parseInt(target);\r\n        if (ele === tar) {\r\n            animations.push([i, ele, true]);\r\n            break;\r\n        } else {\r\n            animations.push([i, ele, false]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function binarySearchAnimations(\r\n    array,\r\n    left,\r\n    right,\r\n    element,\r\n    animations = []\r\n) {\r\n    if (right >= left) {\r\n        let mid = parseInt(left + (right - left) / 2);\r\n        if (array[mid] === element) {\r\n            animations.push([left, right, mid, true]);\r\n            return true;\r\n        } else if (array[mid] > element) {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, left, mid - 1, element, animations);\r\n        } else {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, mid + 1, right, element, animations);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\n// Stylesheets\r\nimport \"./../../utils/bootstrap.min.css\";\r\nimport \"./linearSearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 0.2;\r\n\r\nexport default class LinearSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const prevArray = document.getElementsByClassName(\"l-array-bar\");\r\n        const found = false;\r\n        const disabled = false;\r\n        document.getElementById(\"targetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({ array, found, disabled, msgAfterExecution: \"\" });\r\n    }\r\n\r\n    linearSearch() {\r\n        var msg = \"\";\r\n        const target = document.getElementById(\"targetVal\").value;\r\n        const animations = linearSearchAnimations(this.state.array, target);\r\n        console.log(animations);\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [idx, currentEle, found] = animations[i];\r\n            const arrayBars = document.getElementsByClassName(\"l-array-bar\");\r\n            const arrayBar = arrayBars[idx];\r\n            const arrayBarStyle = arrayBar.style;\r\n\r\n            count++;\r\n\r\n            if (found) {\r\n                msg = `${currentEle} found at index ${idx}`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: true,\r\n                        disabled: true,\r\n                        elementFoundAt: idx,\r\n                        target: currentEle,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                    arrayBar.classList.add(\"highlight\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n                break;\r\n            } else {\r\n                msg = `${target} not found`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: false,\r\n                        disabled: true,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                disabled: false,\r\n                msgAfterExecution: msg,\r\n            });\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                <center>\r\n                    <Header title=\"Linear Search\" />\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-1\"></div>\r\n                            <div className=\"input-group col-sm-10\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"targetVal\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Find Element\"\r\n                                />\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.linearSearch()}\r\n                                        className=\"btn btn-success\"\r\n                                        type=\"button\"\r\n                                        id=\"button-addon2\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Search\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        id=\"resetArray\"\r\n                                        type=\"button\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Reset Array\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-sm-1 \"></div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    {!found ? (\r\n                        <p className=\"found growFind\">{msgAfterExecution}</p>\r\n                    ) : null}\r\n                    <div className=\"container\">\r\n                        {array.map((value, idx) => (\r\n                            <ArrayTile\r\n                                type={`linearSearch`}\r\n                                key={idx}\r\n                                idx={idx}\r\n                                val={value}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    openTab(tabId) {\n        let x = document.getElementsByClassName(\"tabs\");\n        for (let i = 0; i < x.length; i++) {\n            x[i].style.display = \"none\";\n        }\n        document.getElementById(tabId).style.display = \"block\";\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"w3-bar w3-black\">\n                    <button\n                        onClick={() => this.openTab(\"backTrackingTab\")}\n                        className=\"w3-bar-item w3-button\"\n                    >\n                        Backtracking\n                    </button>\n                    <button\n                        onClick={() => this.openTab(\"searchingTab\")}\n                        className=\"w3-bar-item w3-button\"\n                    >\n                        Searching\n                    </button>\n                </div>\n                <div className=\"mt-3\">\n                    <div id=\"backTrackingTab\" className=\"tabs\">\n                        <NQueensProblem />\n                    </div>\n\n                    <div\n                        id=\"searchingTab\"\n                        className=\"tabs\"\n                        style={{ display: \"none\" }}\n                    >\n                        <LinearSearch />\n                        <BinarySearch />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}