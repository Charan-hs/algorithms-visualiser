{"version":3,"sources":["utils/navbar.jsx","utils/randomIntFromInterval.js","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/cellColors.js","sortingAlgorithms/sortingVisualiser.jsx","App.js","index.js"],"names":["NavBar","className","href","randomIntFromInterval","min","max","Math","floor","random","ComplexityTable","id","colSpan","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","i","j","push","doMerge","quickSortHelper","left","right","pivot","swap","buildMaxHeap","heapify","index","leftChild","righChild","heap","arr","temp","cellColors","color","reverse","SortingVisualiser","props","state","disabled","this","resetArray","SIZE_OF_BOARD","val","setState","drawBoard","arrayBoard","document","getElementById","innerHTML","container","style","setProperty","cell","createElement","appendChild","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","parseInt","value","alert","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","setTimeout","arrayBlocks","getElementsByClassName","count","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","transition","classList","add","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","onClick","defaultValue","selectAlgorithm","React","Component","Welcome","App","exact","component","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.6925d774.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavBar = () => (\r\n    <div className=\"bg-dark py-2 px-2\">\r\n        <small className=\"text-light ml-2\">Algorithms Visualiser</small>\r\n        <span className=\"float-right\">\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://github.com/dipeshpatil/algorithms-visualiser\"\r\n            >\r\n                <i className=\"fab text-light fa-github\"></i>\r\n                &nbsp; Repo URL\r\n            </a>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://linkedin.com/in/dipesh-patil\"\r\n            >\r\n                <i className=\"fab text-light fa-linkedin\"></i>\r\n                &nbsp; Dipesh Patil\r\n            </a>\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default NavBar;\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTable\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th colSpan=\"2\">Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Case: </td>\r\n                    <td className=\"text-success table-success\">Best</td>\r\n                    <td className=\"text-danger table-danger\">Worst</td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Heap Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Merge Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Quick Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>Log N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bubble Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Insertion Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Selection Sort</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n    buildMaxHeap(array, animations);\r\n    let lastElement = array.length - 1;\r\n    while (lastElement > 0) {\r\n        swap(0, lastElement, array);\r\n        animations.push([0, lastElement, array[0], array[lastElement]]);\r\n        heapify(array, 0, lastElement, animations);\r\n        lastElement -= 1;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n    let i;\r\n    i = array.length / 2 - 1;\r\n    i = Math.floor(i);\r\n    while (i >= 0) {\r\n        heapify(array, i, array.length, animations);\r\n        i -= 1;\r\n    }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n    let index, leftChild, righChild;\r\n\r\n    while (i < max) {\r\n        index = i;\r\n        leftChild = 2 * i + 1;\r\n        righChild = leftChild + 1;\r\n\r\n        if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n        if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n        if (index === i) return;\r\n\r\n        swap(i, index, heap);\r\n        animations.push([i, index, heap[i], heap[index]]);\r\n        i = index;\r\n    }\r\n}\r\n\r\nfunction swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","const cellColors = [\r\n    [\r\n        \"#040C12\",\r\n        \"#081925\",\r\n        \"#0C2637\",\r\n        \"#10334A\",\r\n        \"#14405C\",\r\n        \"#184C6F\",\r\n        \"#1C5981\",\r\n        \"#206694\",\r\n        \"#2473A6\",\r\n        \"#2980B9\",\r\n        \"#3E8CC0\",\r\n        \"#5399C7\",\r\n        \"#69A6CE\",\r\n        \"#7EB2D5\",\r\n        \"#94BFDC\",\r\n        \"#A9CCE3\",\r\n        \"#BED8EA\",\r\n        \"#D4E5F1\",\r\n        \"#E9F2F8\",\r\n    ],\r\n    [\r\n        \"#180308\",\r\n        \"#300610\",\r\n        \"#480918\",\r\n        \"#600C21\",\r\n        \"#780F29\",\r\n        \"#901231\",\r\n        \"#A8153A\",\r\n        \"#C01842\",\r\n        \"#D81B4A\",\r\n        \"#F01F53\",\r\n        \"#F13564\",\r\n        \"#F34B75\",\r\n        \"#F46286\",\r\n        \"#F67897\",\r\n        \"#F78FA9\",\r\n        \"#F9A5BA\",\r\n        \"#FABBCB\",\r\n        \"#FCD2DC\",\r\n        \"#FDE8ED\",\r\n    ],\r\n    [\r\n        \"#180C03\",\r\n        \"#301906\",\r\n        \"#482609\",\r\n        \"#60330C\",\r\n        \"#78400F\",\r\n        \"#904D12\",\r\n        \"#A85A15\",\r\n        \"#C06718\",\r\n        \"#D8741B\",\r\n        \"#F0811F\",\r\n        \"#F18D35\",\r\n        \"#F39A4B\",\r\n        \"#F4A662\",\r\n        \"#F6B378\",\r\n        \"#F7C08F\",\r\n        \"#F9CCA5\",\r\n        \"#FAD9BB\",\r\n        \"#FCE5D2\",\r\n        \"#FDF2E8\",\r\n    ],\r\n    [\r\n        \"#0D0118\",\r\n        \"#1A0231\",\r\n        \"#27034A\",\r\n        \"#340463\",\r\n        \"#41067C\",\r\n        \"#4E0795\",\r\n        \"#5B08AE\",\r\n        \"#6809C7\",\r\n        \"#750AE0\",\r\n        \"#820CF9\",\r\n        \"#8E24F9\",\r\n        \"#9B3CFA\",\r\n        \"#A754FA\",\r\n        \"#B46DFB\",\r\n        \"#C085FC\",\r\n        \"#CD9DFC\",\r\n        \"#D9B6FD\",\r\n        \"#E6CEFD\",\r\n        \"#F2E6FE\",\r\n    ],\r\n];\r\n\r\nexport default cellColors;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\nimport {\r\n    getMergeSortAnimations,\r\n    getBubbleSortAnimations,\r\n    getInsertionSortAnimations,\r\n    getSelectionSortAnimations,\r\n    getQuickSortAnimations,\r\n    getHeapSortAnimations,\r\n} from \"./sortingAlgorithms\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./../utils/bootstrap.min.css\";\r\nimport \"./sortingVisualiser.css\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-7\">\r\n                        <div\r\n                            className=\"box shadowT board\"\r\n                            id=\"sortingBoard\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"col-sm-5 mt-1\">\r\n                        <div className=\"input-group mt-1\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <button\r\n                                    onClick={() => this.resetArray()}\r\n                                    className=\"btn btn-danger\"\r\n                                    disabled={disabled}\r\n                                >\r\n                                    New Array\r\n                                </button>\r\n                            </div>\r\n                            <select\r\n                                className=\"custom-select\"\r\n                                id=\"sortingAlgoDropDown\"\r\n                                disabled={disabled}\r\n                                defaultValue=\"0\"\r\n                            >\r\n                                <option disabled value=\"0\">\r\n                                    Algorithm\r\n                                </option>\r\n                                <option value=\"1\">Bubble Sort</option>\r\n                                <option value=\"2\">Selection Sort</option>\r\n                                <option value=\"3\">Insertion Sort</option>\r\n                                <option value=\"4\">Quick Sort</option>\r\n                                <option value=\"5\">Heap Sort</option>\r\n                                <option value=\"6\">Merge Sort</option>\r\n                            </select>\r\n                            <div className=\"input-group-append\">\r\n                                <button\r\n                                    onClick={() => this.selectAlgorithm()}\r\n                                    className=\"btn btn-success\"\r\n                                    disabled={disabled}\r\n                                >\r\n                                    Visualize\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <ComplexityTable />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport NavBar from \"./utils/navbar\";\nimport { Route } from \"react-router-dom\";\n\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\n\n// Stylesheets\nimport \"./utils/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst Welcome = () => <div>Welcome</div>;\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar />\n                <Route exact=\"/\" component={Welcome} />\n                <Route path=\"/sorting\" component={SortingVisualiser} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}